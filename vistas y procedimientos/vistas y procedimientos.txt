CREATE VIEW Innovadores as 
SELECT "Usuarios"."identificación",
CONCAT("Usuarios"."primerNombre",' ',"Usuarios"."primerApellido") AS "Nombre y apellido",
"Usuarios"."email"

FROM "Usuarios" INNER JOIN "NivelesB10" ON "Usuarios"."idNivel" = "NivelesB10"."idNivel"
WHERE "NivelesB10"."nombre" = 'Explorador' AND (EXTRACT(YEAR FROM "Usuarios"."fechaDeRegistro") < extract(year from NOW()));



CREATE VIEW "Grupos Populares" AS
SELECT "Grupos"."idGrupo" AS "Identificación del grupo",
"Grupos"."nombreGrupo" AS "Nombre del grupo",
COUNT(*) AS "Número de inscritos",
DENSE_RANK() OVER(ORDER BY COUNT("Grupos"."idGrupo") DESC) AS "Puesto" 
FROM "Grupos" LEFT JOIN "InscripcionesEnGrupos" ON "Grupos"."idGrupo" = "InscripcionesEnGrupos"."idGrupo"
GROUP BY "Grupos"."idGrupo","Grupos"."nombreGrupo"
ORDER BY "Grupos"."idGrupo";

CREATE VIEW "PublicacionesMarzoJulioPorAntropologos" AS
SELECT "Publicaciones"."idPublicación" AS "Identificador",
"Publicaciones"."fechaDePublicación"
FROM "Publicaciones"
WHERE EXTRACT(MONTH FROM "fechaDePublicación") IN ('03','04','05','06','07')
AND "Publicaciones"."identificaciónUsuario" IN(SELECT "Usuarios"."identificación" 
												FROM "Estudiantes" 
												INNER JOIN "Usuarios" ON "Estudiantes"."identificaciónUsuario" = "Usuarios"."identificación"
												WHERE "Usuarios"."idNivel" = (SELECT "idNivel" FROM "NivelesB10"
																				WHERE nombre = 'Integrador')
												AND "Estudiantes"."idPrograma" = 4);



CREATE VIEW TipoDeLikeMasUsado AS
SELECT "nombreTipoDeLike" AS "Tipo de like","Cantidad de usos" 
FROM (SELECT "idTipoDeLike" AS "id tipo de like",COUNT(*) AS "Cantidad de usos",
DENSE_RANK() OVER(ORDER BY COUNT(*) DESC) AS "Puesto"
FROM "Likes"
GROUP BY "idTipoDeLike"
ORDER BY "Cantidad de usos" DESC) "CantidadTipoDeLike"
INNER JOIN "TiposDeLike" ON "id tipo de like" = "idTipoDeLike"
WHERE "Puesto" = 1;


CREATE VIEW publicacioneRecientes 
AS
SELECT * FROM "Cursos"
WHERE "fechaDePublicacion" BETWEEN (CAST(to_char(NOW(), 'YYYY-MM-DD') AS DATE)-7) 
AND (CAST(to_char(NOW(), 'YYYY-MM-DD') AS DATE));



create view datosinscripcion
as
select nombre, "fechaDeIngreso" ,"primerNombre","primerApellido" from "InscripcionesEnCursos"
inner join "Usuarios"
on "InscripcionesEnCursos"."identificaciónUsuario" = "Usuarios"."identificación"
inner join "Cursos"
on "Cursos"."idCurso" = "InscripcionesEnCursos"."idCurso"
order by "fechaDeIngreso";


create view datos_calculodiferencial
as
select "primerNombre","primerApellido"
from"Usuarios"
where"identificación"=(select "identificaciónUsuario"
					  from "InscripcionesEnCursos"
					  where "idCurso"=(select "idCurso"
									  from "Cursos"
									  where "idCurso"= 50));


create view cursosfinalizados as
select  count(*) "cantidad de estudiantes que termiaron un curso" from "InscripcionesEnCursos"
inner join "EstadosDeInscripción"
on "EstadosDeInscripción"."idEstadoInscripción" = "InscripcionesEnCursos"."idEstadoDeInscripción"
where "idEstadoInscripción"=13;

CREATE VIEW CursosDeIngenieria AS
SELECT nombre AS "Curso", 
"descripción" AS "Descripción", 
"costo","certificado","nombreCategoríaCurso" AS "Categoría",
"fechaDePublicacion" AS "Fecha de publicación"

FROM "Cursos" INNER JOIN "CategoríasCursos"
ON "Cursos"."idCategoríaCurso" = "CategoríasCursos"."idCategoríaCurso"

WHERE "nombreCategoríaCurso" = 'ingenieria';



CREATE VIEW "Estadisticas del Post." as
SELECT "idPost" as "Número de Identificación de los Post",
COUNT("idPost") AS "cantidad de Visitas al Post"
FROM "VisitasPost"
GROUP BY "idPost"
ORDER BY "cantidad de Visitas al Post" DESC;


CREATE VIEW "Información de los Post." as
SELECT "post"."fechaCreacion" AS "Fecha de creación",
"post"."titulo" as "Título del Post",
"post"."contenido" AS "Contenido del Post"
from "post";

CREATE VIEW "Estadisticas de las Categorias." as
SELECT "idCategoria" as "Número de Identificación de las Categorias",
COUNT("idCategoria") AS "cantidad de usos de las Categorias"
FROM categoriasignadas
GROUP BY "idCategoria"
ORDER BY "Número de Identificación de las Categorias" ASC;








CREATE OR REPLACE PROCEDURE 
insertarGrupo(idGrupo Integer, nombreGrupo VARCHAR(100), descripción Text,idPrivacidad Integer,idUsuarioCreador Integer )
AS
$code$
DECLARE
privacidad "TiposDePrivacidad"%rowType;
creador "Usuarios"%rowType;
BEGIN
	RAISE NOTICE 'Verficando la existencia del creador del grupo';
	SELECT * INTO creador
	FROM "Usuarios"
	WHERE "identificación" = idUsuarioCreador;
	
	IF creador."identificación" IS NOT NULL THEN	
			RAISE NOTICE 'Asignando la privacidad al grupo';
			SELECT * INTO privacidad
			FROM "TiposDePrivacidad"
			WHERE "idTipoDePrivacidad" = idPrivacidad;
			IF privacidad."idTipoDePrivacidad" IS NOT NULL THEN		
					INSERT INTO "Grupos"
					VALUES(idGrupo,nombreGrupo,descripción,idPrivacidad,idUsuarioCreador);
					INSERT INTO "InscripcionesEnGrupos"
					VALUES(idGrupo,idUsuarioCreador);
					RAISE NOTICE 'El grupo se ha insertado correctamente';	
			ELSE
				RAISE NOTICE 'La privacidad que ha elegido no está disponible en la base de datos';	
		    END IF;
	ELSE
		RAISE NOTICE 'El usuario que ha indicado como creador no se encuentra registrado en la base de datos';
	END IF;
END
$code$
Language 'plpgsql';



CREATE OR REPLACE FUNCTION conexionesUsuarios(idUsuario INTEGER)
RETURNS bigint 
AS
$BODY$
DECLARE
numConexiones bigint;
BEGIN
numConexiones:= (SELECT  COUNT(*)  
				 FROM "Conexiones"
				 WHERE "identificaciónUsuario1" = idUsuario
				 GROUP BY "identificaciónUsuario1"); 
return numConexiones;
END;
$BODY$
language 'plpgsql';


CREATE OR REPLACE FUNCTION facultad(idEstudiante INTEGER)
RETURNS varchar(100)
AS
$BODY$
DECLARE
nombreFacultad varchar(100);
BEGIN
nombreFacultad:= (SELECT "nombre" FROM 
					 "Facultades"
					 WHERE "idFacultad" = (SELECT "idFacultad" FROM 
											 "Programas" WHERE "idPrograma" =  (select "idPrograma" from "Estudiantes"
																				WHERE "identificaciónUsuario" = idEstudiante))); 
return nombreFacultad;
END;
$BODY$
language 'plpgsql';


CREATE OR REPLACE PROCEDURE
insertarEstudiante(identificacion INTEGER,primerNombre varchar(30),segundoNombre varchar(30),primerApellido varchar(30),
segundoApellido varchar(30), email varchar(100),contra varchar(100), biografia text, fechaDeRegistro DATE,
idPais INTEGER, idTipoDeUsuario INTEGER, idNivel INTEGER,idFotoDePerfil INTEGER,idFotoDePortada INTEGER,
idPrograma INTEGER)
AS
$code$

BEGIN
RAISE NOTICE 'Insertando usuario';
INSERT INTO "Usuarios" VALUES(identificacion,primerNombre,segundoNombre,primerApellido,
segundoApellido, email ,contra, biografia, fechaDeRegistro ,
idPais , idTipoDeUsuario , idNivel ,idFotoDePerfil ,idFotoDePortada);
RAISE NOTICE 'Insertando estudiante';
INSERT INTO "Estudiantes" VALUES(identificacion,idPrograma);
RAISE NOTICE 'Estudiante insertado con éxito';
END
$code$
Language 'plpgsql';



CREATE OR REPLACE PROCEDURE
insertarcurso("idCurso" integer,nombre varchar(30),"descripción" varchar(100),costo integer,certificado varchar (2),
"idCategoríaCurso" integer,"identificaciónUsuario" INTEGER,"fechaDeIngreso" VARCHAR(10),"idEstadoDeInscripción" INTEGER)
AS
$code$



BEGIN
RAISE NOTICE 'Insertando cursos';
INSERT INTO "Cursos" values ("idCurso",nombre ,"descripción",costo,certificado,"idCategoríaCurso" );
insert into "InscripcionesEnCursos" values ("identificaciónUsuario" ,"fechaDeIngreso","idEstadoDeInscripción") ;

END
$code$
Language 'plpgsql';




CREATE OR REPLACE PROCEDURE
insertarcursocompleto("idCurso" integer,nombre varchar(30),"descripción" varchar(50),costo integer,certificado varchar (3),"idCategoríaCurso" integer,
"idSecciónCurso" integer,"nombreSecciónCurso" varchar (10),
"idTema" integer,"nombreTemaCurso" varchar(15),url varchar(100))
AS
$code$



BEGIN
RAISE NOTICE 'Insertando curso';
INSERT INTO "Cursos" values ("idCurso",nombre ,"descripción",costo,certificado,"idCategoríaCurso");
RAISE NOTICE 'Insertando secion ';
INSERT INTO "Cursos" values ("idSecciónCurso" ,"nombreSecciónCurso");
RAISE NOTICE 'Insertando tema ';
INSERT INTO "TemasCursos" values ("idTema","nombreTemaCurso","descripción" ,url);
END
$code$
Language 'plpgsql';




CREATE OR REPLACE PROCEDURE
insertarPost(idPost INTEGER,titulo character varying(200),
contenido character varying(10000),fechaCreacion date,imgDest text,idUsuario integer,
idEtiqueta integer,nombreEtiqueta character varying(25))
AS
$code$



BEGIN
RAISE NOTICE 'Creando Post';

INSERT INTO Post values(idPost, titulo, contenido, fechaCreacion, imgDest,idUsuario);



RAISE NOTICE 'Insertando Etiqueta';

INSERT INTO Etiquetas values(idEtiqueta, nombreEtiqueta,idUsuario);

INSERT INTO etiquetasignadas values(idPost, idEtiqueta);



END
$code$
Language 'plpgsql';



BEGIN
RAISE NOTICE 'Creando Post';

INSERT INTO "Post" values("idPost", titulo, contenido, "fechaCreacion", "imgDest",
"numVisitas","idUsuario","idCategoria");



RAISE NOTICE 'Insertando Etiqueta';

INSERT INTO "Etiquetas" values(idEtiqueta, nombreEtiqueta,idUsuario);



INSERT INTO "EtiquetasAsignadas" values(idPost, idEtiqueta);



END
$code$
Language 'plpgsql';


CREATE OR REPLACE PROCEDURE
EliminarEstudiante(identificacion INTEGER)
AS
$code$



BEGIN
RAISE NOTICE 'eliminando usuario';
DELETE FROM "Usuarios" WHERE "identificación" = identificación;
RAISE NOTICE 'eliminando estudiante';
DELETE FROM "Estudiantes" WHERE "identificaciónUsuario" = identificación;



END
$code$
Language 'plpgsql';


CREATE OR REPLACE PROCEDURE
EliminarPost(idPost INTEGER)
AS
$code$



BEGIN
RAISE NOTICE 'eliminando Post';
DELETE FROM "Post" WHERE "idPost" = idPost;
RAISE NOTICE 'eliminando EtiquetasAsignadas';
DELETE FROM "EtiquetasAsignadas" WHERE "idPost" = idPost;



END
$code$
Language 'plpgsql';













